* various small fixes
  - add legend to each tag help screen, e.g. ccat("silver", "Example: objects$time$...")
  - defer: extract object from "artifacts$class$lm$value"

* the initial way to go is to support the regural (arbitrary)
  research process each user might have, and only use repository
  when lineage or a past state are required

* describe the model: what matters in the end are the results (models
  and the facts about the data set that they reveal or confirm);
  a model has its ETL (the sequence of data.frames and accompanying
  plots), the model itself (which can be plotted in numeours ways,
  e.g. residuals, R^2, etc.), and finally optional downstream
  artifacts (further data sets and/or plots)

* go back in history by expressions: search historical commands and
  choose the one whose context (commit) is to be restored

* action verbs for single artifact: explain, browse, history (print
  the historical context of the artifact on console), rmd (export
  history/explanation to Rmd)

* return a tibble with objects from a query under $value

* do not store (task_callback): query, query result, repository;
  ignore attributes assigned by the repository and ui packages

* there could be a state of search, initiated by the "objects" keyword
  and later stored as "search"; every subsequent query would further
  narrow the list of results; this could be useful if the search term
  cannot be easily expressed as a $ key; e.g.

  > objects$other
  [search]> x ~ y + z
  - here the search engine recognizes a formula and searches tags for
    objects that match it in any given way; it then saves the result
    under "search" where from it can be built on
  > search$class$lm
  - this includes the previous formula search step

* maintain a history of searches (and their results?)

* topics for research when data on how this package is used is available:
  - many similar objects: how to exclude artifacts leading up to the final
    one; e.g. multiple plots slowly converging on the desired way of
    presenting data; discover those that are only approximations of that
    final one and "hide" them in the search results, or show only if
    explicitly asked to
